apply from: JAVA_GRADLE
apply from: MAVEN_GRADLE
apply plugin: 'protobuf'

apply plugin: 'idea'
apply plugin: 'eclipse'

apply plugin:'application'

idea.module.sourceDirs += file('build/generated-sources/thrift/main')


project.conf2ScopeMappings.addMapping(MavenPlugin.TEST_COMPILE_PRIORITY + 1, project.configurations.getByName("integrationTestCompile"), Conf2ScopeMappingContainer.TEST)
project.conf2ScopeMappings.addMapping(MavenPlugin.TEST_COMPILE_PRIORITY + 2, project.configurations.getByName("integrationTestRuntime"), Conf2ScopeMappingContainer.TEST)
check.dependsOn integrationTest

configurations {
    jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
}

ext.leelnRepositoryVersion = '0.0.1.BUILD-SNAPSHOT'

// Re-generate Protobuf classes from *.proto files and move them in test sources
//if (project.hasProperty('genProtobuf')) {
//    apply plugin: 'protobuf'
//
//    task updateGenProtobuf(type:Copy, dependsOn: ":spring-web:generateTestProto") {
//        from "${project.buildDir}/generated-sources/test/"
//        into "${projectDir}/src/test/java"
//        doLast {
//            project.delete "${project.buildDir}/generated-sources/test"
//        }
//    }
//
//    tasks.getByPath("compileTestJava").dependsOn "updateGenProtobuf"
//}
//protocPath = '/usr/local/bin/protoc'

dependencies {

    compile "org.fightteam.leeln:leeln-repository:$leelnRepositoryVersion",
            'aopalliance:aopalliance:1.0',
            "org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-aspects:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-context-support:$springVersion",
            "org.springframework:spring-expression:$springVersion",
            "org.springframework:spring-tx:$springVersion",
            "org.springframework:spring-jdbc:$springVersion",
            "org.mybatis:mybatis:$mybatisVersion",
            "org.mybatis:mybatis-spring:$mybatisSpringVersion",
            "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.slf4j:jcl-over-slf4j:$slf4jVersion",
            "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
            "org.apache.tomcat:tomcat-jdbc:$tomcatJdbcVersion",
            "mysql:mysql-connector-java:$mysqlVersion",
            "com.googlecode.protobuf-java-format:protobuf-java-format:1.2",
            "com.google.protobuf:protobuf-java:$protobufVersion",
            "io.netty:netty-all:$nettyVersion",
            "org.apache.thrift:libthrift:0.9.1",
            'com.googlecode.protobuf-rpc-pro:protobuf-rpc-pro-duplex:3.3'


    runtime "org.apache.logging.log4j:log4j-core:$log4jVersion"

    optional "org.springframework.data:spring-data-redis:$springDataRedisVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-web:$springVersion"

    provided "javax.servlet:javax.servlet-api:$servletApiVersion"

    integrationTestCompile "redis.clients:jedis:2.4.1",
            "org.apache.commons:commons-pool2:2.2",
            "redis.embedded:embedded-redis:0.2"

    testCompile 'junit:junit:4.11',
            'org.mockito:mockito-core:1.9.5',
            "org.springframework:spring-test:$springVersion",
            'org.easytesting:fest-assert:1.4',
            "org.springframework.security:spring-security-core:$springSecurityVersion",
            'com.h2database:h2:1.4.182'

    jacoco "org.jacoco:org.jacoco.agent:0.6.2.201302030002:runtime"

}

task printDeps(dependsOn: build) << {
    configurations.each { println it }
    sourceSets.each { println it.getCompileTaskName("proto") }
    sourceSets.each { println it.getCompileTaskName("java") }
    sourceSets.each { println it }
    println tasks['generateProto'].source
    println tasks['compileJava'].source
    println project.buildDir
    println project.buildDir.path
}


//test {
//    jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=${project.group}.*"
//}
//integrationTest {
//    jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=${project.group}.*"
//}

mainClassName = "org.fightteam.leeln.config.Main"

//applicationDefaultJvmArgs = ["-Dgreeting.language=en"]


ext.environment = hasProperty('env') ? env : ''



sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir "src/main/environment/$environment/resources"
        }
    }
}

// copy sql files when package app
task processEnv(type: Copy) {
    if ("$environment" != "" ){
        println "$environment"
        from "src/main/environment/$environment/sql-schema"
        into ""
    }else{
        println 'aaaaa'
    }

}

classes.dependsOn processEnv
processEnv.mustRunAfter processResources